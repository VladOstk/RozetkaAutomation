{
  "{\"sourceRoot\":\"C:\\\\Users\\\\Dell\\\\Downloads\\\\RozetkaAutomation\\\\tests\\\\api\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\Dell\\\\Downloads\\\\RozetkaAutomation\",\"filename\":\"C:\\\\Users\\\\Dell\\\\Downloads\\\\RozetkaAutomation\\\\tests\\\\api\\\\baseServiceTest.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\Dell\\\\Downloads\\\\RozetkaAutomation\",\"plugins\":[],\"presets\":[]}:7.4.4": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\Dell\\Downloads\\RozetkaAutomation\\tests\\api",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\Dell\\Downloads\\RozetkaAutomation",
      "filename": "C:\\Users\\Dell\\Downloads\\RozetkaAutomation\\tests\\api\\baseServiceTest.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\Dell\\Downloads\\RozetkaAutomation",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\Dell\\Downloads\\RozetkaAutomation\\tests\\api\\baseServiceTest.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "C:\\Users\\Dell\\Downloads\\RozetkaAutomation\\tests\\api\\baseServiceTest.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\Dell\\Downloads\\RozetkaAutomation\\tests\\api",
        "sourceFileName": "baseServiceTest.js"
      }
    },
    "ast": null,
    "code": "import { expect, BaseService } from \"../index\";\ndescribe(\"Basic page functionality tests\", () => {\n  let baseService = new BaseService();\n  let baseServiceResponse = {};\n  before(async () => {\n    baseServiceResponse = await baseService.basicGet;\n  });\n  it(\"ensure '/' return success status\", async () => {\n    expect(baseServiceResponse.status).to.eql(200, `status code is ${baseServiceResponse.status}`);\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJhc2VTZXJ2aWNlVGVzdC5qcyJdLCJuYW1lcyI6WyJleHBlY3QiLCJCYXNlU2VydmljZSIsImRlc2NyaWJlIiwiYmFzZVNlcnZpY2UiLCJiYXNlU2VydmljZVJlc3BvbnNlIiwiYmVmb3JlIiwiYmFzaWNHZXQiLCJpdCIsInN0YXR1cyIsInRvIiwiZXFsIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUNJQSxNQURKLEVBRUlDLFdBRkosUUFHTyxVQUhQO0FBS0FDLFFBQVEsQ0FBQyxnQ0FBRCxFQUFtQyxNQUFNO0FBQ2pELE1BQUlDLFdBQVcsR0FBRyxJQUFJRixXQUFKLEVBQWxCO0FBQ0EsTUFBSUcsbUJBQW1CLEdBQUcsRUFBMUI7QUFDQUMsRUFBQUEsTUFBTSxDQUFDLFlBQVc7QUFDZEQsSUFBQUEsbUJBQW1CLEdBQUcsTUFBTUQsV0FBVyxDQUFDRyxRQUF4QztBQUNILEdBRkssQ0FBTjtBQUdJQyxFQUFBQSxFQUFFLENBQUMsa0NBQUQsRUFBcUMsWUFBVztBQUM5Q1AsSUFBQUEsTUFBTSxDQUFDSSxtQkFBbUIsQ0FBQ0ksTUFBckIsQ0FBTixDQUFtQ0MsRUFBbkMsQ0FBc0NDLEdBQXRDLENBQTBDLEdBQTFDLEVBQWdELGtCQUFpQk4sbUJBQW1CLENBQUNJLE1BQU8sRUFBNUY7QUFDSCxHQUZDLENBQUY7QUFHSCxDQVRPLENBQVIiLCJzb3VyY2VSb290IjoiQzpcXFVzZXJzXFxEZWxsXFxEb3dubG9hZHNcXFJvemV0a2FBdXRvbWF0aW9uXFx0ZXN0c1xcYXBpIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIGV4cGVjdCxcclxuICAgIEJhc2VTZXJ2aWNlXHJcbn0gZnJvbSBcIi4uL2luZGV4XCI7XHJcblxyXG5kZXNjcmliZShcIkJhc2ljIHBhZ2UgZnVuY3Rpb25hbGl0eSB0ZXN0c1wiLCAoKSA9PiB7XHJcbmxldCBiYXNlU2VydmljZSA9IG5ldyBCYXNlU2VydmljZTtcclxubGV0IGJhc2VTZXJ2aWNlUmVzcG9uc2UgPSB7fTtcclxuYmVmb3JlKGFzeW5jKCkgPT4ge1xyXG4gICAgYmFzZVNlcnZpY2VSZXNwb25zZSA9IGF3YWl0IGJhc2VTZXJ2aWNlLmJhc2ljR2V0XHJcbn0pO1xyXG4gICAgaXQoXCJlbnN1cmUgJy8nIHJldHVybiBzdWNjZXNzIHN0YXR1c1wiLCBhc3luYygpID0+IHtcclxuICAgICAgICBleHBlY3QoYmFzZVNlcnZpY2VSZXNwb25zZS5zdGF0dXMpLnRvLmVxbCgyMDAsIGBzdGF0dXMgY29kZSBpcyAke2Jhc2VTZXJ2aWNlUmVzcG9uc2Uuc3RhdHVzfWApO1xyXG4gICAgfSk7XHJcbn0pOyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "baseServiceTest.js"
      ],
      "names": [
        "expect",
        "BaseService",
        "describe",
        "baseService",
        "baseServiceResponse",
        "before",
        "basicGet",
        "it",
        "status",
        "to",
        "eql"
      ],
      "mappings": "AAAA,SACIA,MADJ,EAEIC,WAFJ,QAGO,UAHP;AAKAC,QAAQ,CAAC,gCAAD,EAAmC,MAAM;AACjD,MAAIC,WAAW,GAAG,IAAIF,WAAJ,EAAlB;AACA,MAAIG,mBAAmB,GAAG,EAA1B;AACAC,EAAAA,MAAM,CAAC,YAAW;AACdD,IAAAA,mBAAmB,GAAG,MAAMD,WAAW,CAACG,QAAxC;AACH,GAFK,CAAN;AAGIC,EAAAA,EAAE,CAAC,kCAAD,EAAqC,YAAW;AAC9CP,IAAAA,MAAM,CAACI,mBAAmB,CAACI,MAArB,CAAN,CAAmCC,EAAnC,CAAsCC,GAAtC,CAA0C,GAA1C,EAAgD,kBAAiBN,mBAAmB,CAACI,MAAO,EAA5F;AACH,GAFC,CAAF;AAGH,CATO,CAAR",
      "sourceRoot": "C:\\Users\\Dell\\Downloads\\RozetkaAutomation\\tests\\api",
      "sourcesContent": [
        "import {\r\n    expect,\r\n    BaseService\r\n} from \"../index\";\r\n\r\ndescribe(\"Basic page functionality tests\", () => {\r\nlet baseService = new BaseService;\r\nlet baseServiceResponse = {};\r\nbefore(async() => {\r\n    baseServiceResponse = await baseService.basicGet\r\n});\r\n    it(\"ensure '/' return success status\", async() => {\r\n        expect(baseServiceResponse.status).to.eql(200, `status code is ${baseServiceResponse.status}`);\r\n    });\r\n});"
      ]
    },
    "sourceType": "module",
    "mtime": 1557694095655
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\Vladyslav_ostapchuk\\\\Documents\\\\RozetkaAutomation\\\\tests\\\\api\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\Vladyslav_ostapchuk\\\\Documents\\\\RozetkaAutomation\",\"filename\":\"C:\\\\Users\\\\Vladyslav_ostapchuk\\\\Documents\\\\RozetkaAutomation\\\\tests\\\\api\\\\baseServiceTest.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\Vladyslav_ostapchuk\\\\Documents\\\\RozetkaAutomation\",\"plugins\":[],\"presets\":[]}:7.4.4": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\Vladyslav_ostapchuk\\Documents\\RozetkaAutomation\\tests\\api",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\Vladyslav_ostapchuk\\Documents\\RozetkaAutomation",
      "filename": "C:\\Users\\Vladyslav_ostapchuk\\Documents\\RozetkaAutomation\\tests\\api\\baseServiceTest.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\Vladyslav_ostapchuk\\Documents\\RozetkaAutomation",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\Vladyslav_ostapchuk\\Documents\\RozetkaAutomation\\tests\\api\\baseServiceTest.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "C:\\Users\\Vladyslav_ostapchuk\\Documents\\RozetkaAutomation\\tests\\api\\baseServiceTest.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\Vladyslav_ostapchuk\\Documents\\RozetkaAutomation\\tests\\api",
        "sourceFileName": "baseServiceTest.js"
      }
    },
    "ast": null,
    "code": "import { expect, BaseService } from \"../index\";\ndescribe(\"Basic page functionality tests\", () => {\n  let baseService = new BaseService();\n  let baseServiceResponse = {};\n  before(async () => {\n    baseServiceResponse = await baseService.basicGet();\n  });\n  it(\"ensure '/' return success status\", async () => {\n    expect(baseServiceResponse.status).to.eql(200, `status code is ${baseServiceResponse.status}`);\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJhc2VTZXJ2aWNlVGVzdC5qcyJdLCJuYW1lcyI6WyJleHBlY3QiLCJCYXNlU2VydmljZSIsImRlc2NyaWJlIiwiYmFzZVNlcnZpY2UiLCJiYXNlU2VydmljZVJlc3BvbnNlIiwiYmVmb3JlIiwiYmFzaWNHZXQiLCJpdCIsInN0YXR1cyIsInRvIiwiZXFsIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUNJQSxNQURKLEVBRUlDLFdBRkosUUFHTyxVQUhQO0FBS0FDLFFBQVEsQ0FBQyxnQ0FBRCxFQUFtQyxNQUFNO0FBQ2pELE1BQUlDLFdBQVcsR0FBRyxJQUFJRixXQUFKLEVBQWxCO0FBQ0EsTUFBSUcsbUJBQW1CLEdBQUcsRUFBMUI7QUFDQUMsRUFBQUEsTUFBTSxDQUFDLFlBQVc7QUFDZEQsSUFBQUEsbUJBQW1CLEdBQUcsTUFBTUQsV0FBVyxDQUFDRyxRQUFaLEVBQTVCO0FBQ0gsR0FGSyxDQUFOO0FBR0lDLEVBQUFBLEVBQUUsQ0FBQyxrQ0FBRCxFQUFxQyxZQUFXO0FBQzlDUCxJQUFBQSxNQUFNLENBQUNJLG1CQUFtQixDQUFDSSxNQUFyQixDQUFOLENBQW1DQyxFQUFuQyxDQUFzQ0MsR0FBdEMsQ0FBMEMsR0FBMUMsRUFBZ0Qsa0JBQWlCTixtQkFBbUIsQ0FBQ0ksTUFBTyxFQUE1RjtBQUNILEdBRkMsQ0FBRjtBQUdILENBVE8sQ0FBUiIsInNvdXJjZVJvb3QiOiJDOlxcVXNlcnNcXFZsYWR5c2xhdl9vc3RhcGNodWtcXERvY3VtZW50c1xcUm96ZXRrYUF1dG9tYXRpb25cXHRlc3RzXFxhcGkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgZXhwZWN0LFxyXG4gICAgQmFzZVNlcnZpY2VcclxufSBmcm9tIFwiLi4vaW5kZXhcIjtcclxuXHJcbmRlc2NyaWJlKFwiQmFzaWMgcGFnZSBmdW5jdGlvbmFsaXR5IHRlc3RzXCIsICgpID0+IHtcclxubGV0IGJhc2VTZXJ2aWNlID0gbmV3IEJhc2VTZXJ2aWNlKCk7XHJcbmxldCBiYXNlU2VydmljZVJlc3BvbnNlID0ge307XHJcbmJlZm9yZShhc3luYygpID0+IHtcclxuICAgIGJhc2VTZXJ2aWNlUmVzcG9uc2UgPSBhd2FpdCBiYXNlU2VydmljZS5iYXNpY0dldCgpO1xyXG59KTtcclxuICAgIGl0KFwiZW5zdXJlICcvJyByZXR1cm4gc3VjY2VzcyBzdGF0dXNcIiwgYXN5bmMoKSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KGJhc2VTZXJ2aWNlUmVzcG9uc2Uuc3RhdHVzKS50by5lcWwoMjAwLCBgc3RhdHVzIGNvZGUgaXMgJHtiYXNlU2VydmljZVJlc3BvbnNlLnN0YXR1c31gKTtcclxuICAgIH0pO1xyXG59KTsiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "baseServiceTest.js"
      ],
      "names": [
        "expect",
        "BaseService",
        "describe",
        "baseService",
        "baseServiceResponse",
        "before",
        "basicGet",
        "it",
        "status",
        "to",
        "eql"
      ],
      "mappings": "AAAA,SACIA,MADJ,EAEIC,WAFJ,QAGO,UAHP;AAKAC,QAAQ,CAAC,gCAAD,EAAmC,MAAM;AACjD,MAAIC,WAAW,GAAG,IAAIF,WAAJ,EAAlB;AACA,MAAIG,mBAAmB,GAAG,EAA1B;AACAC,EAAAA,MAAM,CAAC,YAAW;AACdD,IAAAA,mBAAmB,GAAG,MAAMD,WAAW,CAACG,QAAZ,EAA5B;AACH,GAFK,CAAN;AAGIC,EAAAA,EAAE,CAAC,kCAAD,EAAqC,YAAW;AAC9CP,IAAAA,MAAM,CAACI,mBAAmB,CAACI,MAArB,CAAN,CAAmCC,EAAnC,CAAsCC,GAAtC,CAA0C,GAA1C,EAAgD,kBAAiBN,mBAAmB,CAACI,MAAO,EAA5F;AACH,GAFC,CAAF;AAGH,CATO,CAAR",
      "sourceRoot": "C:\\Users\\Vladyslav_ostapchuk\\Documents\\RozetkaAutomation\\tests\\api",
      "sourcesContent": [
        "import {\r\n    expect,\r\n    BaseService\r\n} from \"../index\";\r\n\r\ndescribe(\"Basic page functionality tests\", () => {\r\nlet baseService = new BaseService();\r\nlet baseServiceResponse = {};\r\nbefore(async() => {\r\n    baseServiceResponse = await baseService.basicGet();\r\n});\r\n    it(\"ensure '/' return success status\", async() => {\r\n        expect(baseServiceResponse.status).to.eql(200, `status code is ${baseServiceResponse.status}`);\r\n    });\r\n});"
      ]
    },
    "sourceType": "module",
    "mtime": 1557738539111
  }
}